


XTEXT(3X)	    UNIX Programmer's Manual		XTEXT(3X)



NAME
     Xtext - routines to provide simple text output windows

SYNOPSIS
     #include <X/Xtext.h>

     TextWindow *TextCreate(width, height, x, y, parent,
	  fontname, bwidth, fgpixel, bgpixel,
	  bordercolor, fastscroll);
     int height, width, x, y, bwidth, fgpixel, bgpixel,
     fastscroll;
     Window parent;
     char *fontname;
     Pixmap bordercolor;

     TextDestroy(t);
     TextWindow *t;

     TextClear(t);
     TextWindow *t;

     TextRedisplay(t);
     TextWindow *t;

     int TextEvent(t, e);
     TextWindow *t;
     XEvent *e;

     TextPutString(t, str);
     TextWindow *t;
     char *str;

     TextPutChar(t, ch);
     TextWindow *t;
     char ch;

     TextPrintf(t, format [ , arg ] ... )
     TextWindow *t;
     char *format;

     TextFlush(t);
     TextWindow *t;

DESCRIPTION
     These functions provide a simple interface to text output
     windows.

     _T_e_x_t_C_r_e_a_t_e creates a window that is _w_i_d_t_h characters wide
     and _h_e_i_g_h_t characters high.  It is located with its upper
     left hand corner located at the point _x, _y in the window
     _p_a_r_e_n_t. The foreground (i.e. the characters) is in the color
     _f_g_p_i_x_e_l and the background is the color _b_g_p_i_x_e_l. The border



Printed 9/15/87           April 10 1986                         1






XTEXT(3X)	    UNIX Programmer's Manual		XTEXT(3X)



     is _b_w_i_d_t_h pixels wide and filled with the Pixmap _b_o_r_d_e_r_-
     _c_o_l_o_r. If _f_a_s_t_s_c_r_o_l_l is nonzero, text containing multiple
     newlines is displayed with a single jump scroll rather than
     with a single scroll for each newline.

     The structure _T_e_x_t_W_i_n_d_o_w is defined in
     /_u_s_r/_i_n_c_l_u_d_e/_X/_X_t_e_x_t._h.  The only field that should be of
     interest to most applications is _w, the X Window id of the
     created window.  This is quite useful if the application
     wishes to map the created window.

     _T_e_x_t_D_e_s_t_r_o_y destroys the window described by its argument.
     The window is also destroyed automatically if the process
     creating it is terminated.

     _T_e_x_t_C_l_e_a_r clears the window described by its argument.

     _T_e_x_t_R_e_d_i_s_p_l_a_y redisplays the window described by its argu-
     ment.  If the argument is NULL, all active text windows are
     redisplayed.

     _T_e_x_t_E_v_e_n_t handles the event passed to it.	It returns 0 if
     it was an event the library knows how to deal with, and 1 if
     it was an event of an unknown type; the latter should only
     happen if the application has changed the event mask for the
     window.  Any event that the application receives that has as
     its _w_i_n_d_o_w the window id of the text window should be passed
     to _T_e_x_t_E_v_e_n_t for handling.  Scrolling text generates an
     event per line of events, so the application should check
     for them frequently.  An alternative routine, _T_e_x_t_F_l_u_s_h, can
     be used to handle all outstanding events for all active text
     windows.

     _T_e_x_t_P_u_t_S_t_r_i_n_g prints its string in its window.  The charac-
     ter '\n' (newline) is treated specially, and any other char-
     acter is taken from the font.  If the string contains multi-
     ple newlines, a single scroll is done for each line unless
     the _f_a_s_t_s_c_r_o_l_l argument was non-zero in the call to
     _T_e_x_t_C_r_e_a_t_e.

     _T_e_x_t_P_u_t_C_h_a_r is similar to _T_e_x_t_P_u_t_S_t_r_i_n_g but only prints a
     single character.	Again, newline is treated specially.

     _T_e_x_t_P_r_i_n_t_f is similar to the standard function _p_r_i_n_t_f except
     that it prints its result in the specified window.  The
     resulting string is passed to _T_e_x_t_P_u_t_S_t_r_i_n_g. See also the
     BUGS section at the end of this page.

     _T_e_x_t_F_l_u_s_h is analogous to the stdio function _f_f_l_u_s_h in that
     it causes all outstanding output requests to be flushed to
     the specified window.  If the argument is NULL, all windows
     are flushed.  For novice X developers, this routine



Printed 9/15/87           April 10 1986                         2






XTEXT(3X)	    UNIX Programmer's Manual		XTEXT(3X)



     eliminates the need for event handling from X applications.

SEE ALSO
     printf(3S), xterm(1), X(8C)

AUTHORS
     Paul Asente, Stanford University; Mark Colan, MIT Project
     Athena/IBM

BUGS
     _T_e_x_t_P_r_i_n_t_f will truncate the output if the resulting string
     is more than 2048 characters long.

     Since X operates asynchronously, it is possible to get way
     ahead of the server.  This means that it may be quite a
     while between when a scroll happens on the screen and when
     _X_t_e_x_t gets around to filling in areas that couldn't be
     scrolled normally.  This should only happen if the applica-
     tion issues a great many output requests very quickly, or if
     it doesn't get around to receiving the events _X_t_e_x_t needs to
     fill these areas in.  Also, some strange TCP bugs are
     invoked if an application which has gotten far ahead of the
     X server is stopped (as with a control-Z).
































Printed 9/15/87           April 10 1986                         3



