^@		escape to superior
   ^U0^@	terminate to superior
   ^U^@		garbage collect TED address space
^A		go to start of line
   ^U^A		go to start of buffer
^B		move back # chars
^C		escape to superior
   ^U0^C	terminate to superior
   ^U^C		garbage collect TED address space
^D		delete # chars forward
^E		go to end of line
   ^U^E		go to end of buffer
^F		move forward # chars
^G		quit from numeric/string argument or subcommand option
^H		help command
   ^U-^H	toggle buffer saving
   ^U0^H	flush help buffers
   ^U^H		user-defined help
^I		insert # tabs
^J		run/kill interactive inferior fork
^K		kill # lines
   ^U-^K	kill to start of line
   ^U0^K	kill to end of line
^L		clear screen & redisplay
   ^U-^L	redisplay
   ^U^L		save buffer
^M		insert # newlines before cursor
^N		move down # lines
^O		insert # newlines after cursor
^P		move up # lines
^Q		insert next char typed # times
^R		discard current file(s) and read new file(s)
   ^U-^R	insert new file(s)
   ^U^R		insert text of file(s)
^S		search for string argument # times
   ^U0^S	set search case mode
^T		set the mark at current cursor
   ^U^T		swap mark & cursor
^U		multiply # by number (default 4)
^V
   ^A,A		back to start of file
   ^B,B		back # words
    C		save # words
   ^D,D		delete # words forwards
   ^E,E		forward to end of file
   ^F,F		forward # words
    G		insert last string/filename arg
    H		indent marked text # extra spaces
   ^H		adjust blanks to place cursor on column #
   ^I,I		insert saved text |#| times (#<0: before cursor)
   ^J,J		scroll window down # lines
    K		delete marked text
   ^K		delete # files
    L		go to line # of current file
   ^M,M		set mark
    N		next file
   ^N		next screen of text
   ^O,O		open space for # new files
    P		previous file
   ^P		previous screen of text
   ^R,R		insert deleted text |#| times (#<0: before cursor)
    S		save marked text
   ^S		save # lines
    T		display current date & time
   0T		insert current date & time
   ^T		display CPU time used by TED
   ^U,U		change indentation to previous line's + #
   ^V,V		display coordinates of cursor
    W		save & delete marked text
   ^W		save & delete # lines
   ^X,X		exchange mark and cursor
   ^Z,Z		delete all lines, reset file name
   ^],]		move to start of # next word
   ^[,[		move to end of # previous word
   ^?		delete # words backwards
   space	skip blanks forward
   ^@		delete blanks forward
    #		insert # as ASCII character
    @		go to line # of buffer
    !		find & display # next long line
   0!		clear top line of screen
    =		scroll when # percent of window will remain
    ^		display cursor # percent up the window
    %		display window on end of buffer # percent blank
    >		delete to start of # next word
    <		delete to end of # previous word
^W		write current file
   ^U-^W	write changed files
   ^U0^W	write current file if changed
   ^U^W		append current file
^X
   ^B
      ^P	backward # paragraph starts
      ^S	backward # sentence starts
   ^D		enter draw mode
   ^E
      ^P	end of paragraph
      ^S	end of sentence
   ^F
      ^P	forward # paragraph starts
      ^S	forward # sentence starts
   ^H
      ^B	create/goto named buffer
      ^D	display info about all buffers
      ^F	flip to previous buffer
      ^H	goto next matching buffer
      ^K	kill named buffer
      ^N	go forward # buffers
      ^P	go back # buffers
      ^R	read file(s) into buffer of same name
      ^S	append # lines onto named buffer
      ^W	withdraw # lines and append onto named buffer
       I	insert text of named buffer at cursor
       S	append marked text onto named buffer
       W	withdraw marked text and append onto named buffer
   ^I
      ^B	move backward # levels
      ^D	move down and in # levels
      ^E	move down and out # levels
      ^F	move forward # levels
      ^H	move up and in # levels
      ^N	move to # next line at same level
      ^P	move to # previous line at same level
      ^U	move up and out # levels
      ^S	move forward to line indented # spaces
      ^^	move backward to line indented # spaces
   ^K
      R		reset normal ^K mode
      S		set ^K to delete to end of line when not at it and #=1
   ^M		check for mail
   ^P		search for pattern |#| times (#>0: prefix with ^X^@)
  0^P		set pattern search confirmation mode
   ^R		redisplay current line + #
   ^S
      R		set normal search mode
      S		set incremenal search mode
   ^W
      ^B	move bottom of this window down # lines
      ^K	kill current window
      ^N	go down # windows
      ^P	go up # windows
      ^S	split current window (#=0,1: in half, #~=0,1: |#| lines)
      ^R	split current window and read files (#=0,1: in half, #~=0,1: |#| lines)
      ^T	move top of this window up # lines
       D	go down # windows to cursor
       N	scroll next window (|#|=1: screenful, |#|~=1: # lines)
       P	scroll previous window (|#|=1: screenful, |#|~=1: # lines)
       U	go up # windows to cursor
   ^X		execute macro file
   ^Y		execute named macro # times (#<1: define macro)
^X
   ^Z
      ^A	move backward up # list levels
      ^B	move backward over # lists
      ^D	move (#>0: forward, #<0:backward) down # list levels
      ^E	move forward up # list levels
      ^F	move forward over # lists
      ^N	move forward up and down # times
      ^P	move backward up and down # times
    B		box # lines
    C
      C		capitalize marked text
      L		lower-case-ify marked text
      U		upper-case-ify marked text
    E
      R		reset red & blue function keys to normal
      S		swap meaning of red & blue function keys
    I		set indenter option
    M
      C		set ^N/^P to try to stay in same column
      F		set ^N^P to try for fixed column position # (#<=1: current)
      R		reset ^N/^P to normal mode
      S		set ^N/^P to skip leading blanks and tabs
    N		set environment variable to number
    O
      R		set normal character insert mode
      S		set character overwrite mode
    R		restrict buffer between mark and cursor
    S		set environment variable to string
    T
      B		set default output speed to # baud
      P		enable padding
     0P		disable padding
      S		enable scrolling
     0S		disable scrolling
    W		check spelling of word (#=0: kill speller)
    X		sort current file
   -X		reverse sort current file
    Z		set to GC every 2**(#-4) megabytes
^Y
   ^@c		define macro for char 'c'
   c		execute macro for 'c' # times (#<1: define macro)
^Z		replace string in rest of current file (#>1: rest of buffer)
      A		go to start of update region
      C		replace with new string and go to next match
      D		change default replace string (#~=1: from search string)
      E		replace with default string and stop
      I		#=0: don't ignore case, #~=0: ignore case
      K		kill the line containing the match
      M		kill lines between previous and current match
      N		go to next match
      P		go to previous match
      Q		quit the update
      R		kill the rest of the line after the match
      S		change search string
      U		update rest of the buffer without pause
      W		kill lines not containing match to end of region
      X		kill rest of line after each match to end of region
      Y		replace with default string and go to next match
      Z		kill lines containing match to end of region
      #		count number of occurrences to end of region
^[
   @,?w		move to end of # previous word
   A,?x		move backward # pages
   B,?r		move forward # pages
   C,?v		move right # words
   D,?t		move left # word
   H		enter alternate keypad mode
   J		pattern search # times for default
   L,?q		delete backward to end of # previous word
   M,?s		delete forward to start of # next word
   N,?y		move to start of # next word\n"
   Oc		same as ?c when c is lowercase letter, else same as c
   P		delete forward # words
   Q		delete backward # words
   R		forward string search # times for default
   S,?p		backward string search # times for default
   T		set case mode for searches
   U		scroll window up # lines
   V		scroll window down # lines
   W		reposition window at cursor
   ?n		exit to EXEC
   ?u		exit alternate keypad mode
   ?M		garbage collect address space
   [c		same as ?c when c is lowercase letter, else same as c
   ^]		redefine escape sequence
^\
   A		display last result
   B		insert last result into buffer
   C		compile current file
   D		R current file for Diablo output
   E		Scribe current file
   G		split current file into separate module files
   H		type check current file
   I		indent current file
   J		run compiler with commands (#=0: don't write file)
   K		keep/kill an inferior compiler
   L		R current file for LPT output
   M		Makefile
   N		set compiler name
   O		optimize current file
   P		R current file for Press output
   Q		indent # units starting at right of cursor
   R		run R with commands (#=0: don't write file)
   S		send contents of current file as mail
   U		run compiler on changed/all files
   V		R current file for Varian output
   W		change working directory
   X		R current file for XGP output
   Y		run "progy_name" on contents of current file
   Z		run "progz_name" on current file
  0Z		run "progz_name" with jcl
^]
   A		set auto-break prefix
   B		set auto-break limit to #
   C		fill comments
   E		center marked text in field |#| wide (#<0: pad right)
   I		turn auto-indent mode on
  0I		turn auto-indent mode off
   J		set justify switch to even
  0J		set justify switch to ragged
   L		left justify marked text in field # wide
   M		fill marked text
   N		fill # lines
   P		fill next paragraph
   R		right justify marked text in field |#| wide (#<0: pad right)
   W		set fill width to #
^^
   I		insert list of matching file names into buffer
   L		list matching file names
   P		scan matching files for pattern match
   R		recursive edit matching files
   S		scan matching files for string match
   T		type out matching files
^_
   D		delete files (#=0: don't confirm)
   L		link to file
   M		change mode of files
   R		rename file
   S		symbolic link to file
^?		delete # chars backwards
